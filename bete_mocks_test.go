// Code generated by MockGen. DO NOT EDIT.
// Source: bete.go

// Package bete is a generated GoMock package.
package bete

import (
	gomock "github.com/golang/mock/gomock"
	datamall "github.com/yi-jiayu/datamall/v3"
	ted "github.com/yi-jiayu/ted"
	reflect "reflect"
	time "time"
)

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// MockDataMall is a mock of DataMall interface
type MockDataMall struct {
	ctrl     *gomock.Controller
	recorder *MockDataMallMockRecorder
}

// MockDataMallMockRecorder is the mock recorder for MockDataMall
type MockDataMallMockRecorder struct {
	mock *MockDataMall
}

// NewMockDataMall creates a new mock instance
func NewMockDataMall(ctrl *gomock.Controller) *MockDataMall {
	mock := &MockDataMall{ctrl: ctrl}
	mock.recorder = &MockDataMallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataMall) EXPECT() *MockDataMallMockRecorder {
	return m.recorder
}

// GetBusArrival mocks base method
func (m *MockDataMall) GetBusArrival(busStopCode, serviceNo string) (datamall.BusArrival, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusArrival", busStopCode, serviceNo)
	ret0, _ := ret[0].(datamall.BusArrival)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusArrival indicates an expected call of GetBusArrival
func (mr *MockDataMallMockRecorder) GetBusArrival(busStopCode, serviceNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusArrival", reflect.TypeOf((*MockDataMall)(nil).GetBusArrival), busStopCode, serviceNo)
}

// MockTelegram is a mock of Telegram interface
type MockTelegram struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramMockRecorder
}

// MockTelegramMockRecorder is the mock recorder for MockTelegram
type MockTelegramMockRecorder struct {
	mock *MockTelegram
}

// NewMockTelegram creates a new mock instance
func NewMockTelegram(ctrl *gomock.Controller) *MockTelegram {
	mock := &MockTelegram{ctrl: ctrl}
	mock.recorder = &MockTelegramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelegram) EXPECT() *MockTelegramMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockTelegram) Do(request ted.Request) (ted.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", request)
	ret0, _ := ret[0].(ted.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockTelegramMockRecorder) Do(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTelegram)(nil).Do), request)
}
